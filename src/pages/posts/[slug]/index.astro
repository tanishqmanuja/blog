---
import { type CollectionEntry, getCollection } from "astro:content";
import Posts from "@/layouts/Posts.astro";
import PostDetails from "@/layouts/PostDetails.astro";
import { POSTS_PER_PAGE } from "@/config";
import { isPublishable, sortByDate } from "@/utils/post";
import { range } from "@/utils/array";

export interface Props {
  post: CollectionEntry<"blog">;
}

export async function getStaticPaths() {
  const posts = await getCollection("blog", isPublishable);

  const postResult = posts.map(post => ({
    params: { slug: post.slug },
    props: { post },
  }));

  const totalPageCount = Math.ceil(posts.length / POSTS_PER_PAGE);
  const pagePaths = range(1, totalPageCount).map(pageNum => ({
    params: { slug: String(pageNum) },
  }));

  return [...postResult, ...pagePaths];
}

const { slug } = Astro.params;
const { post } = Astro.props;

const posts = await getCollection("blog", isPublishable).then(posts =>
  posts.sort(sortByDate),
);

const totalPageCount = Math.ceil(posts.length / POSTS_PER_PAGE);
const pageNumbers = range(1, totalPageCount);

const currentPage =
  slug && !isNaN(Number(slug)) && pageNumbers.includes(Number(slug))
    ? Number(slug)
    : 0;
const lastPost = currentPage * POSTS_PER_PAGE;
const startPost = lastPost - POSTS_PER_PAGE;

const paginatedPosts = posts.slice(startPost, lastPost);
---

{
  post ? (
    <PostDetails post={post} />
  ) : (
    <Posts
      posts={paginatedPosts}
      pageNum={currentPage}
      totalPages={pageNumbers.length}
    />
  )
}
